package app.exploitr.fast.login;

import java.io.IOException;
import java.security.GeneralSecurityException;
import com.scottyab.aescrypt.AESCrypt;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.AlertDialog;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Typeface;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import app.exploitr.fast.login.LocalCredentialManager;
import android.widget.TextView;
import android.widget.Toast;
import app.exploitr.fast.login.R;


public class MainActivity extends Activity  {
	
	


	@Override
    protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
			    
        final ImageView stat = (ImageView)findViewById(R.id.isconnectedorx);
        final Button logibt = (Button)findViewById(R.id.login);
        final Button logubt = (Button)findViewById(R.id.logout);
        final TextView txtV = (TextView)findViewById(R.id.status);
        final ProgressBar loadingprgb = (ProgressBar)findViewById(R.id.checkin);
        Typeface typeFace = Typeface.createFromAsset(getAssets(), "sfont.ttf");
        txtV.setTypeface(typeFace);
        logibt.setTypeface(typeFace);
        logubt.setTypeface(typeFace);
        

        
        
        try{
      	  WifiManager wifi = (WifiManager)this.getSystemService(WIFI_SERVICE); 
      	  boolean b=wifi.isWifiEnabled();
      	  if(b){}
      	  else{
      		  wifi.setWifiEnabled(true);  }
      	  }finally{}
  	 

            try {
				if (Status()==true) { stat.setImageResource(R.drawable.isconnected);//server reached
				                logibt.setVisibility(View.INVISIBLE);
				                logubt.setVisibility(View.VISIBLE);
				} else { stat.setImageResource(R.drawable.isconnectedx);//server is not reachable
				}
			} catch (IOException e2) {
				e2.printStackTrace();
			} catch (InterruptedException e2) {
				e2.printStackTrace();
			}
    
     


      logibt.setOnClickListener(new View.OnClickListener() {
      public void onClick(View v) {
    	  
		    final String GUNAME = LocalCredentialManager.getInstance(getBaseContext()).getUser();
		    final String GPWD = LocalCredentialManager.getInstance(getBaseContext()).getPassword();

		   
    
		    try{
			    	 
		    	    if(GUNAME == null){
                                Toast.makeText(MainActivity.this, "Please Enter Your Username And Password in Login Settings", Toast.LENGTH_SHORT ).show();
			    	 			Intent intent = new Intent(MainActivity.this, SettingsActivity.class);
			    	 			startActivity(intent);}
			    	 		
			    	 else{
			    		 
			    		    final String UNAME  = AESCrypt.decrypt(Build.FINGERPRINT, GUNAME);
			    		    final String PWD = AESCrypt.decrypt(Build.FINGERPRINT, GPWD);


			    		    
			             	WebView logindb = (WebView) findViewById(R.id.loginop);
						    logindb.getSettings().setLoadWithOverviewMode(true);
						    logindb.getSettings().setUseWideViewPort(true);
						    logindb.loadUrl("http://1.1.1.1/login1.html?a=%3F"+UNAME+"%2B%2F%40&b=%3F"+PWD+"%2B%2F%40");
						    logindb.setWebViewClient(new WebViewClient());
						    WebSettings webSettings = logindb.getSettings();
						    webSettings.setJavaScriptEnabled(true); //insted of using lint, disable check
						    loadingprgb.setVisibility(View.VISIBLE);
						    
						    logindb.setWebViewClient(new WebViewClient() {

						    public void onPageFinished(WebView view, String url) {
						    	       	   
						    	loadingprgb.setVisibility(View.INVISIBLE);
						    	
						    	      try {
										if (Status()==true) { stat.setImageResource(R.drawable.isconnected);
										  logibt.setVisibility(View.INVISIBLE);
										  logubt.setVisibility(View.VISIBLE);
										  
										         Notification.Builder knild = new Notification.Builder(MainActivity.this);
										         knild.setSmallIcon(R.drawable.ic_launcher);
										         knild.setContentTitle("Keep Alive Activated");
										         knild.setContentText("You will not be logged out again!");
										         NotificationManager knotific =(NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
										         Notification n;
										         n = knild.build();
										         n.flags |= Notification.FLAG_NO_CLEAR;
										         knotific.notify(0, n);	
										         
										         AlarmManager starter = (AlarmManager) getSystemService(ALARM_SERVICE);
										         Context context = MainActivity.this;
										         Intent  mIntent = new Intent(context, BackOn.class);
										         context.startService(mIntent);
										         PendingIntent sender = PendingIntent.getBroadcast(context, 0, mIntent, 0);
										         boolean started = (PendingIntent.getBroadcast(MainActivity.this,0, new Intent(MainActivity.this, BackOn.class),
										         PendingIntent.FLAG_NO_CREATE) != null);

										         if (started) starter.cancel(sender);
										         
										         starter.setRepeating(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(), 120000,sender);
										         
										         PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
										         WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"");
										    	 wakeLock.acquire();
										  
												 
       	                            }
										else { stat.setImageResource(R.drawable.isconnectedx);
										            logibt.setVisibility(View.VISIBLE);
										            logubt.setVisibility(View.INVISIBLE);
										            
										        }
									} catch (IOException e) {
										e.printStackTrace();
									} catch (InterruptedException e) {
										e.printStackTrace();
									}
						    	    
						    }});}} catch (GeneralSecurityException e1) {
						    		Toast.makeText(MainActivity.this, "Key Decryption Error!", Toast.LENGTH_SHORT).show();
								}}});
	
	
    logubt.setOnClickListener(new View.OnClickListener() {
    public void onClick(View v) {
   			  
    			WebView logoutdb = (WebView) findViewById(R.id.loginop);
    	        logoutdb.getSettings().setLoadWithOverviewMode(true);
    	        logoutdb.getSettings().setUseWideViewPort(true);
    	        logoutdb.loadUrl("http://1.1.1.1/logout");
    	        logoutdb.setWebViewClient(new WebViewClient());
    	        WebSettings webSettings = logoutdb.getSettings();
    	        webSettings.setJavaScriptEnabled(true);// java script is enabled
    	        loadingprgb.setVisibility(View.VISIBLE);
    	        
    	        
    	        logoutdb.setWebViewClient(new WebViewClient() {

    	        	   public void onPageFinished(WebView view, String url) {
    	        		   
    	        		        loadingprgb.setVisibility(View.INVISIBLE);
    	        		   
    	        	            try {
									if (Status()==true) { stat.setImageResource(R.drawable.isconnected);//server reached
									logibt.setVisibility(View.INVISIBLE);
									logubt.setVisibility(View.VISIBLE);
									Toast.makeText(MainActivity.this, "Logout Error!", Toast.LENGTH_SHORT).show();

									} else { stat.setImageResource(R.drawable.isconnectedx);
									logibt.setVisibility(View.VISIBLE);
									logubt.setVisibility(View.INVISIBLE);;//server is not reachable
									                   
									}
								} catch (IOException e) {
									e.printStackTrace();
								} catch (InterruptedException e) {
									e.printStackTrace();
								}}
   });}});}
	
	

	
	
	private boolean Status() throws IOException, InterruptedException{
		
		 Runtime runtime = Runtime.getRuntime();
   	  Process proc;
	      proc = runtime.exec("ping -c 1 216.58.196.110");
	      proc.waitFor();
	      int exit = proc.exitValue();
	      if (exit == 0){ return true;}
	      else{ return false;}
	}
	
	
	@Override
	public void onBackPressed() {
	    
		  AlertDialog.Builder builder = new AlertDialog.Builder(this);
	        builder.setMessage("Exit Login")
	        	   .setCancelable(false)
	        	   .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
	        public void onClick( DialogInterface dialog, final int id) {
	        	
		         PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
		         WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"");
		    	 
		    	    synchronized (powerManager) {
		    	       
		    	        if (wakeLock != null) {
		    	            try {
		    	                wakeLock.release();
		    	            } catch (Throwable th) {
		    	                
		    	            }
		    	        } 
		    	    }
	        	
                 finish();
	        }
	        })
	        	 	.setNegativeButton("No", new DialogInterface.OnClickListener() {
	        public void onClick( DialogInterface dialog, int id) {dialog.cancel();}});
	        AlertDialog alert = builder.create();
		    alert.show();
		
	}

	

	@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main, menu);
        return true;}

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
        case R.id.action_settings:;
        startActivity(new Intent(this, SettingsActivity.class));
            return true;
        default: return super.onOptionsItemSelected(item);
        case R.id.action_about:;
        startActivity(new Intent(this, AboutActivity.class));
            return true;
                   
    }
 }

}
