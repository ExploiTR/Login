package app.exploitr.fast.login;

import android.app.ActivityOptions;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Typeface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class SettingsActivity extends AppCompatActivity {


    @Override
    protected void onCreate(Bundle x) {
        super.onCreate(x);

        if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.VIOLET) {
            setTheme(R.style.AppTheme2);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.DEEPBLUE) {
            setTheme(R.style.AppTheme3);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.INDIGO) {
            setTheme(R.style.AppTheme4);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.GREY) {
            setTheme(R.style.AppTheme5);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.BLUEGREY) {
            setTheme(R.style.AppTheme6);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.RED) {
            setTheme(R.style.AppTheme7);
        }

        setContentView(R.layout.activity_settings);

        if (getSupportActionBar() != null) getSupportActionBar().setTitle("Login / Settings");

        final EditText utxt = (EditText) findViewById(R.id.usernameput);
        Typeface typeFace = Typeface.createFromAsset(getAssets(), "sfont.ttf");
        utxt.setTypeface(typeFace);
        final EditText ptxt = (EditText) findViewById(R.id.passwordput);
        ptxt.setTypeface(typeFace);

        Button save = (Button) findViewById(R.id.savedata);
        save.setTypeface(typeFace);
        save.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {

                final String USERNAME = utxt.getText().toString();
                final String PASSWORD = ptxt.getText().toString();


                if (USERNAME.equals("")) {
                    Toast.makeText(getApplicationContext(), "Username and Password is RESET", Toast.LENGTH_LONG).show();
                    DataMan.getInstance(getBaseContext()).setUser("");
                } else {
                    DataMan.getInstance(getBaseContext()).setUser(USERNAME);
                    DataMan.getInstance(getBaseContext()).setPassword(PASSWORD);
                    CharSequence text = "Username is set to → " + USERNAME + "\n" + "Password is set to → " + PASSWORD;
                    Toast.makeText(getApplicationContext(), text, Toast.LENGTH_SHORT).show();
                }

                finish();

            }

        });

        Button reset = (Button) findViewById(R.id.resetdata);
        reset.setTypeface(typeFace);
        reset.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {

                AlertDialog.Builder builder = new AlertDialog.Builder(SettingsActivity.this);
                builder.setMessage("Delete All Data?")
                        .setCancelable(false);
                builder.setPositiveButton("I'm Sure", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {

                        AsyncTask.execute(new Runnable() {

                            @Override
                            public void run() {

                                Process p;
                                try {
                                    p = Runtime.getRuntime().exec("pm clear app.exploitr.fast.login");
                                    p.waitFor();
                                } catch (Exception e1) {
                                    e1.printStackTrace();
                                }

                            }
                        });

                        dialog.dismiss();
                        finish();
                    }
                });
                builder.setNegativeButton("Nope", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {

                        dialog.dismiss();
                    }
                });
                AlertDialog dialog = builder.create();
                dialog.show();

            }
        });


    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        Bundle anim = ActivityOptions.makeCustomAnimation(
                getApplicationContext(), R.anim.firstmove,R.anim.lastmove).toBundle();
        switch (item.getItemId()) {
            case R.id.action_theme:
                startActivity(new Intent(SettingsActivity.this, ThemeActivity.class),anim);
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    @Override
    public void finish() {
        super.finish();
        overridePendingTransition(0, R.anim.fade_out);
    }

}
