package app.exploitr.fast.login;

import android.app.AlertDialog;
import android.app.DownloadManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Typeface;
import android.net.Uri;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.support.v7.app.AppCompatActivity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.AdView;
import com.google.android.gms.ads.MobileAds;
import com.google.android.gms.tasks.RuntimeExecutionException;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;


public class MainActivity extends AppCompatActivity {

    private ProgressBar progress;
    private WebView logindb;
    int z;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final ImageView stat = (ImageView) findViewById(R.id.isconnectedorx);
        final Button loginAction = (Button) findViewById(R.id.login);
        final TextView txtV = (TextView) findViewById(R.id.status);
        progress = (ProgressBar) findViewById(R.id.checkin);
        Typeface typeFace = Typeface.createFromAsset(getAssets(), "sfont.ttf");
        txtV.setTypeface(typeFace);
        loginAction.setTypeface(typeFace);
        logindb = new WebView(this);
        logindb.setWebViewClient(new WebViewClient());
        logindb.getSettings().setJavaScriptEnabled(true);
        final BufferedReader[] forAd = {null};


        WifiManager wifi = (WifiManager) getApplicationContext().getSystemService(WIFI_SERVICE);
        boolean b = wifi.isWifiEnabled();
        if (!b) {
            wifi.setWifiEnabled(true);
            System.out.println("Wifi enabled");
            
        }

        try {
            if (Status()==0){ stat.setImageResource(R.drawable.isconnected);//server reached
                loginAction.setText("Logout");
                runUpdate r = new runUpdate();
                r.execute();
                System.out.println("Done Status()");
                showAd();
            } else { stat.setImageResource(R.drawable.isconnectedx);
                System.out.println("Done Status()");}//server is not reachable
        } catch (Exception e) {
            Toast.makeText(this, "Network Error"+ e, Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }

        AsyncTask.execute(new Runnable() {
            @Override
            public void run() {

                try {
                    forAd[0] = new BufferedReader(new InputStreamReader(new FileInputStream("/system/etc/hosts")));
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }

                String toAd;

                try {
                    while ((toAd = forAd[0].readLine()) != null)
                    {
                        if (toAd.contains("admob")|toAd.contains("ad")|toAd.contains("doubleclick")|toAd.contains("googleads"))
                        {
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    Toast.makeText(MainActivity.this,"Disable your Adblocker please!",Toast.LENGTH_SHORT).show();
                                    finish();
                                }
                            });
                            break;
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });


        loginAction.setOnClickListener(new View.OnClickListener() {
                                      @Override
                                      public void onClick(View v) {

                                          if(loginAction.getText().toString().equals("Login")){

                                              final String GUNAME = DataMan.getInstance(getBaseContext()).getUser();
                                              final String GPWD = DataMan.getInstance(getBaseContext()).getPassword();

                                              if(GUNAME == null){
                                                  Toast.makeText(MainActivity.this, "Please Enter Your Username And Password in Login Settings", Toast.LENGTH_SHORT ).show();
                                                  Intent intent = new Intent(MainActivity.this, SettingsActivity.class);
                                                  startActivity(intent);
                                                  System.out.println(intent);}

                                              else{

                                                  System.out.println(GUNAME);
                                                  System.out.println(GPWD);

                                                  logindb.loadUrl("http://1.1.1.1/login1.html?a=%3F"+GUNAME+"%2B%2F%40&b=%3F"+GPWD+"%2B%2F%40");                                                  progress.setVisibility(View.VISIBLE);

                                                  logindb.setWebViewClient(new WebViewClient() {

                                                      @Override
                                                      public void onPageFinished(WebView view, String url) {

                                                          progress.setVisibility(View.INVISIBLE);
                                                          System.out.println("Login finished");

                                                          if (Status()==0) { stat.setImageResource(R.drawable.isconnected);
                                                              loginAction.setText("Logout");
                                                              showAd();
                                                              System.out.println("Success!");

                                                              }else { stat.setImageResource(R.drawable.isconnectedx);
                                                                      loginAction.setText("Login");
                                                                      System.out.println("Fail!");
                                                          }}});}}
                                          else{
                                              logindb.setWebViewClient(new WebViewClient());
                                              logindb.loadUrl("http://1.1.1.1/logout");
                                              progress.setVisibility(View.VISIBLE);

                                              System.out.println("Logged out");

                                              logindb.setWebViewClient(new WebViewClient() {

                                                  @Override
                                                  public void onPageFinished(WebView view, String url) {

                                                      progress.setVisibility(View.INVISIBLE);

                                                          if (Status()==0) { stat.setImageResource(R.drawable.isconnected);//server reached
                                                              loginAction.setText("Logout");
                                                          } else { stat.setImageResource(R.drawable.isconnectedx);
                                                              loginAction.setText("Login"); //server is not reachable
                                                              }
                                                      }}); }}});}


    private void showAd() {
        MobileAds.initialize(getApplicationContext(), "ca-app-pub-8111689089728808/4079351379");
        AdView mAdView = (AdView) findViewById(R.id.adView);
        AdRequest adr = new AdRequest.Builder().addTestDevice("CC92A98D9091D54D52AB52B93BF1E90E").build();
        System.out.println("ADURL"+adr.getContentUrl());
        mAdView.loadAd(adr);
    }

    private int fetchVCode() {

        int VcodeI = 0;

        AsyncTask.execute(new Runnable() {

            @Override
            public void run() {
                URL url;
                try {
                    url = new URL("https://raw.githubusercontent.com/ExploiTR/Login/master/version.txt");
                    URLConnection urlConnection = url.openConnection();
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));

                    StringBuilder content = new StringBuilder();
                    String line;
                    while ((line = bufferedReader.readLine()) != null) {
                        content.append(line);
                    }
                    bufferedReader.close();

                    String Vcodes = content.toString();
                    final int VcodeI = Integer.parseInt(Vcodes);

                    System.out.println("VCodeI first" + VcodeI);
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        });
        System.out.println("VCodeI changed" + VcodeI);
        return VcodeI;


    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_settings:
                startActivity(new Intent(this, SettingsActivity.class));
                return true;
            default:
                return super.onOptionsItemSelected(item);
            case R.id.action_about:
                startActivity(new Intent(this, AboutActivity.class));
                return true;

        }
    }

    @Override
    public void onBackPressed() {
        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this)
                .setTitle("Exit?")
                .setMessage("Close Login ?")
                .setNegativeButton(android.R.string.no, null)
                .setPositiveButton(android.R.string.yes,new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {

                        dialog.dismiss();
                        android.os.Process.killProcess(android.os.Process.myPid());
                    }
                });
        AlertDialog dialog = builder.create();
        dialog.show();

    }

    private class runUpdate extends AsyncTask<String, Integer, String> {

        @Override
        protected String doInBackground(String... params) {

            PackageManager manager = getApplicationContext().getPackageManager();
            PackageInfo info;
            try {
                info = manager.getPackageInfo(getApplicationContext().getPackageName(), 0);

                final int version = info.versionCode;

                if (version < fetchVCode()) {

                    runOnUiThread(new Runnable() {

                        @Override
                        public void run() {

                            AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                            builder.setMessage("Update Available! (Github Server)")
                                    .setCancelable(false);
                            builder.setPositiveButton("Update Now", new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {

                                    doJUrl d = new doJUrl();
                                    d.execute();

                                    dialog.dismiss();

                                }
                            });
                            builder.setNegativeButton("Not now", new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {

                                    dialog.dismiss();
                                }
                            });
                            AlertDialog dialog = builder.create();
                            dialog.show();

                        }
                    });

                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            System.out.println("running update");
            return null;
        }


    }

    private class doJUrl extends AsyncTask<Void, Void, Void> {

        @Override
        protected Void doInBackground(Void... params) {


            try {
                System.out.println("Code reached at doJUrl");
                URL updateurl;
                updateurl = new URL("https://api.github.com/repos/ExploiTR/Login/releases/latest");
                HttpURLConnection conn = (HttpURLConnection) updateurl.openConnection();
                conn.setRequestMethod("GET");
                conn.connect();
                InputStream in = new BufferedInputStream(conn.getInputStream());
                BufferedReader reader = new BufferedReader(new InputStreamReader(in));
                StringBuilder sb = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    sb.append(line).append('\n');
                }

                String finaldata = sb.toString();
                System.out.println(finaldata);

                JSONObject jsonObj = new JSONObject(finaldata);
                JSONArray inf = jsonObj.getJSONArray("assets");
                JSONObject c = inf.getJSONObject(0);
                String dwurl = c.getString("browser_download_url");
                System.out.println(dwurl);
                final Uri dwuri = Uri.parse(dwurl);

                final File file = new File("file://"+Environment.getExternalStorageDirectory().getPath()+"/Download/Login.apk");
                boolean delete = file.delete();
                System.out.println(delete);
                final DownloadManager sendreq = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);
                DownloadManager.Request request = new DownloadManager.Request(dwuri);
                request.setTitle("Downloading Update [Login]");
                request.setDescription("Please wait...");
                request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, "Login.apk");
                final long downloadId = sendreq.enqueue(request);

                System.out.println("finished method doJUrl,launching apk");
                BroadcastReceiver onComplete = new BroadcastReceiver() {
                    public void onReceive(Context ctxt, Intent intent) {
                        Intent install = new Intent(Intent.ACTION_VIEW);
                        install.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                        install.setDataAndType(Uri.parse("file://" + Environment.getExternalStorageDirectory().getPath() + "/Download/Login.apk"), sendreq.getMimeTypeForDownloadedFile(downloadId));
                        startActivity(install);

                        unregisterReceiver(this);
                    }
                };
                registerReceiver(onComplete, new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));

            } catch (Exception e) {
                e.printStackTrace();
            }

            return null;

        }

    }

    private int Status(){

        try {
            Process check = Runtime.getRuntime().exec("ping -c 1 8.8.8.8");
            check.waitFor();
            z = check.exitValue();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return z;
    }

}