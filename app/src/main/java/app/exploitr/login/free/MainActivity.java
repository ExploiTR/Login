package app.exploitr.login.free;

import android.Manifest;
import android.accounts.Account;
import android.accounts.AccountManager;
import android.annotation.SuppressLint;
import android.app.ActivityOptions;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Typeface;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.NavigationView;
import android.support.design.widget.Snackbar;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Patterns;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.crashlytics.android.Crashlytics;
import com.crashlytics.android.answers.Answers;
import com.crashlytics.android.answers.ShareEvent;

import java.util.regex.Pattern;

import io.fabric.sdk.android.Fabric;
import pl.droidsonroids.gif.GifImageView;

@SuppressLint("SetTextI18n")
public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {

    private WifiManager wifiManager;
    private Button loginAction;
    private DrawerLayout drawer;
    private GifImageView gifProgress;
    private ImageView statusImage;
    private FloatingActionButton fab;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.VIOLET) {
            setTheme(R.style.AppTheme2_NoActionBar);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.DEEPBLUE) {
            setTheme(R.style.AppTheme3_NoActionBar);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.INDIGO) {
            setTheme(R.style.AppTheme4_NoActionBar);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.GREY) {
            setTheme(R.style.AppTheme5_NoActionBar);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.BLUEGREY) {
            setTheme(R.style.AppTheme6_NoActionBar);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.RED) {
            setTheme(R.style.AppTheme7_NoActionBar);
        } else {
            DataMan.getInstance(getBaseContext()).setTheme(ThemeActivity.BLUE);
        }

        setContentView(R.layout.activity_main);

        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        gifProgress = findViewById(R.id.loadingAction);

        if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.VIOLET) {
            gifProgress.setImageResource(R.drawable.anim2);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.DEEPBLUE) {
            gifProgress.setImageResource(R.drawable.anim3);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.INDIGO) {
            gifProgress.setImageResource(R.drawable.anim4);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.GREY) {
            gifProgress.setImageResource(R.drawable.anim5);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.BLUEGREY) {
            gifProgress.setImageResource(R.drawable.anim6);
        } else if (DataMan.getInstance(getBaseContext()).getTheme() == ThemeActivity.RED) {
            gifProgress.setImageResource(R.drawable.anim7);
        }

        //Main UI Codes Up

        // statusImage

        TextView statusImageText = findViewById(R.id.statsText);
        Typeface typeFace = Typeface.createFromAsset(getAssets(), "sfont.ttf");
        statusImageText.setTypeface(typeFace);

        wifiManager = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);

        fab = findViewById(R.id.fab);

        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (!wifiManager.isWifiEnabled()) {
                    Snackbar.make(view, "Turning Up WiFi", Snackbar.LENGTH_SHORT).show();
                    wifiManager.setWifiEnabled(true);
                    fab.setImageDrawable(ContextCompat.getDrawable(getBaseContext(), R.drawable.wifi_down));
                } else {
                    Snackbar.make(view, "Shutting Down WiFi", Snackbar.LENGTH_SHORT).show();
                    wifiManager.setWifiEnabled(false);
                    fab.setImageDrawable(ContextCompat.getDrawable(getBaseContext(), R.drawable.wifi_up));
                }
            }
        });

        drawer = findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        loginAction = findViewById(R.id.loginAction);

        gifProgress = findViewById(R.id.loadingAction);

        statusImage = findViewById(R.id.stat);

        statusImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                AlertDialog.Builder alert = new AlertDialog.Builder(MainActivity.this)
                        .setTitle("Internet Connection Status Accuracy:")
                        .setCancelable(true)
                        .setMessage("Sometimes, when network condition isn't good, Login may give you wrong Status information.\n" +
                                "Because, now(:-D) Login checks internet connection status based on ping results for 8.8.8.8.\n" +
                                "\n" +
                                "If Login receives successful ping response it reports you that you're connected. But sometimes\n" +
                                "due to network reasons that wouldn't happen, but that doesn't mean you aren't connected.Try logging in.");
                alert.show();
            }
        });


        loginAction.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (loginAction.getText().toString().equals("Login")) {

                    final String GUNAME = DataMan.getInstance(getBaseContext()).getUser();
                    final String GPWD = DataMan.getInstance(getBaseContext()).getPassword();

                    if (GUNAME == null) {
                        Bundle anim = ActivityOptions.makeCustomAnimation(
                                getApplicationContext(), R.anim.firstmove, R.anim.lastmove).toBundle();
                        Toast.makeText(MainActivity.this, "Please Enter Your Username And Password in Login Settings", Toast.LENGTH_SHORT).show();
                        Intent intent = new Intent(MainActivity.this, SettingsActivity.class);
                        startActivity(intent, anim);
                    } else {
                        new Connect(loginAction, gifProgress, statusImage, findViewById(R.id.fab)).execute(GUNAME, GPWD);
                    }
                } else {
                    new Disconnect(loginAction, gifProgress, statusImage, findViewById(R.id.fab)).execute();
                }
            }
        });

        final Fabric fabric = new Fabric.Builder(this)
                .kits(new Crashlytics(), new Answers())
                .debuggable(true)
                .build();
        Fabric.with(fabric);
        Crashlytics.setUserEmail(getMail());
        Crashlytics.setUserIdentifier(Build.FINGERPRINT);
        Crashlytics.setUserName(Build.DEVICE);

        if (!DataMan.getInstance(getBaseContext()).isOld()) {
            DataMan.getInstance(getBaseContext()).setOld(true);
            new AlertDialog.Builder(MainActivity.this)
                    .setTitle("Hello! User")
                    .setMessage("Changelog : \n\n" +
                            "1.Wishnet and my app changed login gateway to 2.2.2.2 " +
                            "\n2.Fixed some code which could have cause memory leaks" +
                            "\n3.targetSDK 27 : Will ask you for permission in next screen" +
                            "\n\nLogin is now Login Free." +
                            "\nI'm soon going to launch a paid version @Play Store" +
                            "\nI've not decided till now, but it would price likely from 10 to 15 INR")
                    .setCancelable(false)
                    .setPositiveButton("I Understand", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                                if (checkSelfPermission(Manifest.permission.GET_ACCOUNTS) != PackageManager.PERMISSION_GRANTED) {
                                    requestPermissions(new String[]{Manifest.permission.GET_ACCOUNTS}, 101);
                                }
                            }
                        }
                    })
                    .show();
        }
    }

    private String getMail() {
        Pattern emailPattern = Patterns.EMAIL_ADDRESS; // API level 8+
        Account[] accounts = AccountManager.get(MainActivity.this).getAccounts();
        for (Account account : accounts) {
            if (emailPattern.matcher(account.name).matches()) {
                return account.name;
            }
        }
        return "empty@nomail.com";
    }

    @Override
    protected void onResume() {
        super.onResume();
        new StatusChecker(loginAction, gifProgress, statusImage, findViewById(R.id.fab)).execute();
        if (!wifiManager.isWifiEnabled()) {
            fab.setImageDrawable(ContextCompat.getDrawable(getBaseContext(), R.drawable.wifi_up));
            new AlertDialog.Builder(this)
                    .setTitle("Can't Detect Any Network Connection")
                    .setMessage("Please Turn Up Wifi")
                    .setCancelable(true)
                    .show();
        } else {
            if (!isNetworkAvailable()) {
                new AlertDialog.Builder(this)
                        .setTitle("Can't Detect Any Network Connection")
                        .setMessage("Wifi is up, but device isn't connected to any network")
                        .setCancelable(true)
                        .show();
            }
            fab.setImageDrawable(ContextCompat.getDrawable(getBaseContext(), R.drawable.wifi_down));
        }
    }


    @Override
    public void onBackPressed() {
        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this)
                .setMessage("Exit Login ?")
                .setCancelable(true)
                .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        drawer = findViewById(R.id.drawer_layout);
                        if (drawer.isDrawerOpen(GravityCompat.START)) {
                            drawer.closeDrawer(GravityCompat.START);
                        }
                        finish();
                        if (android.os.Build.VERSION.SDK_INT >= 21) {
                            finishAndRemoveTask();
                        }
                    }
                });
        AlertDialog dialog = builder.create();
        dialog.show();
    }


    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        int id = item.getItemId();
        Bundle anim = ActivityOptions.makeCustomAnimation(
                getApplicationContext(), R.anim.firstmove, R.anim.lastmove).toBundle();
        if (id == R.id.nav_settings) {
            Intent intent = new Intent(MainActivity.this, SettingsActivity.class);
            startActivity(intent, anim);
        } else if (id == R.id.nav_about) {
            Intent intent = new Intent(MainActivity.this, AboutActivity.class);
            startActivity(intent, anim);
        } else if (id == R.id.nav_share) {

            Answers.getInstance().logShare(new ShareEvent()
                    .putMethod("Shared App")
                    .putContentName("Answers named #1 in Mobile Analytics")
                    .putContentType("share")
                    .putContentId(Build.DEVICE + ":" + Build.MANUFACTURER));

            String shareBody = getResources().getString(R.string.about_body);
            Intent sharingIntent = new Intent(android.content.Intent.ACTION_SEND);
            sharingIntent.setType("text/plain");
            sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, shareBody);
            startActivity(Intent.createChooser(sharingIntent, "Share about Login"));
        }
        DrawerLayout drawer = findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }


    @Override
    public boolean onMenuOpened(int featureId, Menu menu) {
        if (!drawer.isDrawerOpen(GravityCompat.START)) drawer.openDrawer(GravityCompat.START);
        else drawer.closeDrawer(GravityCompat.START);
        return super.onMenuOpened(featureId, menu);
    }

    private boolean isNetworkAvailable() {
        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo;
        if (connectivityManager != null) {
            activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        } else {
            return false;
        }
        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (grantResults[0] != PackageManager.PERMISSION_GRANTED) {
            Toast.makeText(MainActivity.this, "Please help to debug problems by allowing permission / It's all OPEN-SOURCE", Toast.LENGTH_LONG).show();
            DataMan.getInstance(getBaseContext()).setOld(false);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                finishAndRemoveTask();
            } else {
                finish();
            }
        } else {
            DataMan.getInstance(getBaseContext()).setOld(true);
        }
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }
}
