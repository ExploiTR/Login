package app.exploitr.login.free;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Build;
import android.preference.PreferenceManager;

import com.scottyab.aescrypt.AESCrypt;

import java.security.GeneralSecurityException;

class DataMan {
	
	private static final String VERSION_CODE = "_vcode";
	private static final String USR = "_usr";
	private static final String PWD = "_pwd";
	private static final String THM = "_th";
	private static final String OLD = "_od";
	private static DataMan instance;
	private final SharedPreferences save;
	
	private DataMan(Context context) {
		save = PreferenceManager.getDefaultSharedPreferences(context);
	}
	
	static DataMan getInstance(Context context) {
		if (instance == null) {
			instance = new DataMan(context);
		}
		return instance;
	}
	
	String getUser() {
		String usr = save.getString(USR, "");
		if (!"".equals(usr)) {
			try {
				usr = AESCrypt.decrypt(Build.FINGERPRINT, usr);
			} catch (GeneralSecurityException e) {
				e.printStackTrace();
			}
		} else {
			return "";
		}
		return usr;
	}
	
	void setUser(String user) {
		if (!user.equals("")) {
			try {
				save.edit().putString(USR, AESCrypt.encrypt(Build.FINGERPRINT, user)).apply();
			} catch (GeneralSecurityException e) {
				e.printStackTrace();
				System.out.println("Error at setUSER() ");
			}
		} else {
			save.edit().putString(USR, user).apply();
		}
	}
	
	String getPassword() {
		String pass = save.getString(PWD, "");
		if (!"".equals(pass)) {
			try {
				pass = AESCrypt.decrypt(Build.FINGERPRINT, pass);
			} catch (GeneralSecurityException e) {
				e.printStackTrace();
			}
		} else {
			return "";
		}
		return pass;
	}
	
	void setPassword(String pass) {
		if (!pass.equals("")) {
			try {
				save.edit().putString(PWD, AESCrypt.encrypt(Build.FINGERPRINT, pass)).apply();
			} catch (GeneralSecurityException e) {
				e.printStackTrace();
				System.out.println("Error at setPassword() ");
			}
		} else {
			save.edit().putString(PWD, pass).apply();
		}
		
	}
	
	int getTheme() {
		return save.getInt(THM, 0);
	}
	
	void setTheme(int theme) {
		save.edit().putInt(THM, theme).apply();
	}
	
	boolean isOld() {
		return save.getBoolean(OLD, false);
	}
	
	void setOld(boolean what) {
		save.edit().putBoolean(OLD, what).apply();
	}
	
	int getVersionCode() {
		return save.getInt(VERSION_CODE, 0);
	}
	
	void setVersionCode(int versionCode) {
		save.edit().putInt(VERSION_CODE, versionCode).apply();
	}
}


