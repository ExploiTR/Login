package app.exploitr.login.platinum.ui.fragments.dashboard;

import android.app.Activity;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.DataSource;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.engine.GlideException;
import com.bumptech.glide.request.RequestListener;
import com.bumptech.glide.request.target.Target;
import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.api.Scope;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.DriveScopes;
import com.google.firebase.crashlytics.FirebaseCrashlytics;

import java.io.IOException;

import app.exploitr.fast.login.R;
import app.exploitr.fast.login.databinding.FragmentDashboardBinding;
import app.exploitr.login.platinum.database.UserProfileDB;
import app.exploitr.login.platinum.drive.DriveHelper;
import app.exploitr.login.platinum.helpers.SimpleFunctions;

public class DashboardFragment extends Fragment {

	private FragmentDashboardBinding binding;
	private ActivityResultLauncher<Intent> launchSignIn;
	private UserProfileDB profile;

	public View onCreateView(@NonNull LayoutInflater inflater,
							 ViewGroup container, Bundle savedInstanceState) {
		registerSignIn();

		binding = FragmentDashboardBinding.inflate(inflater, container, false);

		binding.signIn.setOnClickListener(v -> {
			if (GoogleSignIn.getLastSignedInAccount(requireContext()) != null) {
				startSignInAction();
			} else {
				startSignOutAction();
			}
		});

		profile = new UserProfileDB(getContext());

		return binding.getRoot();
	}

	private void startSignOutAction() {

	}

	private void registerSignIn() {
		launchSignIn = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {
			if (result.getResultCode() == Activity.RESULT_OK) {
				binding.signInOutText.setText(getString(R.string.sign_out));
				binding.signInOutText.setCompoundDrawablesWithIntrinsicBounds(ContextCompat.getDrawable(requireContext(), R.drawable.ic_log_out),
						null, null, null);
				try {
					loadUserProfileAndData();
				} catch (IOException e) {
					e.printStackTrace();
				}
			} else if (result.getResultCode() == Activity.RESULT_CANCELED) {
				if (!requireActivity().isFinishing())
					Toast.makeText(getContext(), "SignIn was cancelled!", Toast.LENGTH_SHORT).show();
			}
		});
	}

	private void loadUserProfileAndData() throws IOException {
		GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(requireContext());

		if (account != null) {
			DriveHelper.loadDriveAPI(account, getContext(), new DriveHelper.DriveListener() {
				@Override
				public <T> void onJobDone(T object) {
					if (object instanceof Drive) {
						loadJoiningDateInternal(object);
						loadUsersAndISPsInternal(object);
					}
				}

				@Override
				public void onError(Exception e) {
					e.printStackTrace();
					FirebaseCrashlytics
							.getInstance()
							.recordException(new RuntimeException("failed loading drive api"));
				}
			});

			updateUsernameInternal(account);
		}
	}

	private <T> void loadUsersAndISPsInternal(T object) {
		DriveHelper.loadISPAndUserProfiles((Drive) object,
				new DriveHelper.DriveListener() {
					@Override
					public <t> void onJobDone(t object) {
						if (object instanceof Boolean) {
							//highlight progress
						}
					}

					@Override
					public void onError(Exception e) {

					}
				});
	}

	private <T> void loadJoiningDateInternal(T object) {
		DriveHelper.loadJoiningDate((Drive) object, getContext(), new DriveHelper.DriveListener() {
			@Override
			public <t> void onJobDone(t object) {
				if (object instanceof String) {
					profile.setJoiningDate((String) object);
					new Handler(Looper.getMainLooper())
							.post(() -> binding.joinTimingText
									.setText(SimpleFunctions.formattedTimeDiff((String) object)));
				}
			}

			@Override
			public void onError(Exception e) {
				e.printStackTrace();
				FirebaseCrashlytics
						.getInstance()
						.recordException(new RuntimeException("failed loading join date"));
			}
		});
	}

	private void updateUsernameInternal(GoogleSignInAccount account) {
		if (account == null || account.getDisplayName() == null)
			return;
		String[] name = account.getDisplayName().split(" ");
		binding.firstName.setText(name[0].length() > 0 ? name[0] : "Unknown");
		binding.lastName.setText(name[1].length() > 0 ? name[1] : "Unknown");

		Uri ph_uri;
		if ((ph_uri = account.getPhotoUrl()) != null) {
			profile.setUsername(account.getDisplayName())
					.setProfileUrl(ph_uri.toString());
			loadPhotoInternal(ph_uri);
		}
	}

	private void loadPhotoInternal(Uri ph_uri) {
		Glide.with(requireContext())
				.load(ph_uri)
				.diskCacheStrategy(DiskCacheStrategy.ALL)
				.addListener(new RequestListener<>() {
					@Override
					public boolean onLoadFailed(@Nullable GlideException e, Object model,
												Target<Drawable> target, boolean isFirstResource) {
						//todo handle load failed
						return false;
					}

					@Override
					public boolean onResourceReady(Drawable resource, Object model, Target<Drawable> target,
												   DataSource dataSource, boolean isFirstResource) {
						return false;
					}
				})
				.into(binding.profilePhotoView);
	}

	private void startSignInAction() {
		GoogleSignInOptions signInOptions = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
				.requestScopes(new Scope(DriveScopes.DRIVE_APPDATA))
				.requestScopes(new Scope(DriveScopes.DRIVE_FILE))
				.requestEmail()
				.build();
		GoogleSignInClient googleSignInClient = GoogleSignIn.getClient(requireActivity(), signInOptions);
		launchSignIn.launch(googleSignInClient.getSignInIntent());
	}

	@Override
	public void onDestroyView() {
		super.onDestroyView();
		binding = null;
	}
}