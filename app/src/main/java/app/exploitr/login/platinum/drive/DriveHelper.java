package app.exploitr.login.platinum.drive;

import android.content.Context;

import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.api.client.extensions.android.http.AndroidHttp;
import com.google.api.client.extensions.android.json.AndroidJsonFactory;
import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;
import com.google.api.client.http.FileContent;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.DriveScopes;
import com.google.api.services.drive.model.File;
import com.google.api.services.drive.model.FileList;

import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.Iterator;
import java.util.Objects;

import app.exploitr.fast.login.R;
import app.exploitr.login.platinum.database.UserProfileDB;
import app.exploitr.login.platinum.models.UserDataModel;

public class DriveHelper {

	private static final String FILENAME_JOINING = "joining_info.txt";
	private static final String FILENAME_ISP_USERS_PROFILE = "isp_username_info.txt";

	private static final String FIELD_ISP_PROFILE_ISP_LOGIN_ADDRESS = "isp_login_address";
	private static final String FIELD_ISP_PROFILE_ISP_NAME = "isp_name";
	private static final String FIELD_ISP_PROFILE_PROFILE_ID = "profile_id";
	private static final String FIELD_ISP_PROFILE_PROFILE_NAME = "profile_name";

	private static final String FIELD_JSON_ISP_LIST = "isp_profiles";

	/*Caller methods*/

	public static void loadISPAndUserProfiles(Drive drive, DriveListener listener) {
		loadISPAndUsersInternal(drive, listener);
	}

	public static void loadJoiningDate(Drive drive, Context context, DriveListener listener) {
		new Thread(() -> {
			FileList files;
			try {
				files = getDriveFilesLoader(drive);
			} catch (Exception e) {
				listener.onError(e);
				return;
			}

			if (files.getFiles().size() == 0) {
				createJoiningDate(context, drive, listener);
			} else {
				boolean found = false;
				for (File file : Objects.requireNonNull(files).getFiles()) {
					if (file.getName().equals(FILENAME_JOINING)) {
						found = true;
						try {
							InputStream stream = drive.files().get(file.getId())
									.executeMediaAsInputStream();
							StringBuilder builder = new StringBuilder();
							String read;
							try (BufferedReader reader = new BufferedReader(new InputStreamReader(stream))) {
								while ((read = reader.readLine()) != null) {
									builder.append(read);
								}
							}
							listener.onJobDone(builder.toString());
							break;
						} catch (Exception e) {
							listener.onError(e);
							return;
						}
					}
				}
				if (!found)
					createJoiningDate(context, drive, listener);
			}
		}).start();
	}

	public static void loadDriveAPI(GoogleSignInAccount account, Context context, DriveListener listener) {
		GoogleAccountCredential credential = GoogleAccountCredential.usingOAuth2(
				context, Collections.singleton(DriveScopes.DRIVE_FILE));
		credential.setSelectedAccount(account.getAccount());
		Drive googleDriveService =
				new Drive.Builder(
						AndroidHttp.newCompatibleTransport(), new AndroidJsonFactory(), credential)
						.setApplicationName(context.getString(R.string.app_name))
						.build();
		listener.onJobDone(googleDriveService);
	}

	/*Worker+caller methods*/

	private static void loadISPAndUsersInternal(Drive drive, DriveListener listener) {
		new Thread(() -> {
			FileList files;
			try {
				files = getDriveFilesLoader(drive);
			} catch (Exception e) {
				listener.onError(e);
				return;
			}

			if (files.getFiles().size() != 0) {
				boolean found = false;
				for (File file : Objects.requireNonNull(files).getFiles()) {
					if (file.getName().equals(FILENAME_ISP_USERS_PROFILE)) {
						found = true;
						try {
							InputStream stream = drive.files().get(file.getId())
									.executeMediaAsInputStream();
							StringBuilder builder = new StringBuilder();
							String read;
							try (BufferedReader reader = new BufferedReader(new InputStreamReader(stream))) {
								while ((read = reader.readLine()) != null) {
									builder.append(read);
								}
							}
							processISPAndUsersInternal(builder.toString(), listener);
							break;
						} catch (Exception e) {
							listener.onError(e);
							return;
						}
					}
				}
				listener.onJobDone(found);
			} else {
				listener.onJobDone(false);
			}
		}).start();
	}

	private static void processISPAndUsersInternal(String usersJson, DriveListener listener) {
		try {
			JSONObject object = new JSONObject(usersJson);
			JSONObject user_list = object.getJSONObject(FIELD_JSON_ISP_LIST);

			for (Iterator<String> it = object.keys(); it.hasNext(); ) {
				UserDataModel model = new UserDataModel();
				JSONObject model_object = user_list.getJSONObject(it.next());

				model.setIsp_name(model_object.getString(FIELD_ISP_PROFILE_ISP_NAME))
						.setIsp_login_address(model_object.getString(FIELD_ISP_PROFILE_ISP_LOGIN_ADDRESS))
						.setProfile_id(model_object.getLong(FIELD_ISP_PROFILE_PROFILE_ID))
						.setProfile_name(model_object.getString(FIELD_ISP_PROFILE_PROFILE_NAME));

				model_object.remove(FIELD_ISP_PROFILE_PROFILE_NAME);
				model_object.remove(FIELD_ISP_PROFILE_ISP_NAME);
				model_object.remove(FIELD_ISP_PROFILE_PROFILE_ID);
				model_object.remove(FIELD_ISP_PROFILE_ISP_LOGIN_ADDRESS);

				for (Iterator<String> any = model_object.keys(); it.hasNext(); ) {
					if ()
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			listener.onError(e);
		}
	}

	/*internal workers I/O*/
	public static void processAndStoreIspAndUserDataInternal(String toString, DriveListener listener) {
		try {

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void createJoiningDate(Context context, Drive driveService, DriveListener listener) {
		File fileMetadata = new File();
		fileMetadata.setName(FILENAME_JOINING);
		fileMetadata.setParents(Collections.singletonList("appDataFolder"));

		long now = System.currentTimeMillis();
		java.io.File written = getFile(context, now);
		if (written == null)
			return;

		FileContent mediaContent = new FileContent("text/plain", written);

		try {
			driveService.files().create(fileMetadata, mediaContent)
					.setFields("id")
					.execute();
			new UserProfileDB(context).setJoiningDate(String.valueOf(now));
			listener.onJobDone(now);
		} catch (Exception e) {
			listener.onError(e);
			e.printStackTrace();
		}
	}

	/*internal specific worker methods*/
	private static java.io.File getFile(Context context, long now) {
		java.io.File dataDir = context.getCacheDir();
		if (!dataDir.canRead() || !dataDir.canWrite())
			return null;

		java.io.File filePath = new java.io.File(context.getCacheDir(), FILENAME_JOINING);
		FileWriter writer;
		try {
			writer = new FileWriter(filePath);
			writer.write(String.valueOf(now));
			writer.flush();
			return filePath;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	private static FileList getDriveFilesLoader(Drive drive) throws IOException {
		return drive.files().list()
				.setSpaces("appDataFolder")
				.setFields("nextPageToken,files(id,name)")
				.execute();
	}

	public interface DriveListener {
		<T> void onJobDone(T object);

		void onError(Exception e);
	}
}
