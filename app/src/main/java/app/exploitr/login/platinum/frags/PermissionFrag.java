package app.exploitr.login.platinum.frags;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.core.content.ContextCompat;

import agency.tango.materialintroscreen.SlideFragment;
import app.exploitr.fast.login.R;
import app.exploitr.fast.login.ui_access.MainActivity;
import app.exploitr.fast.login.utils.DataMan;


public class PermissionFrag extends SlideFragment {

    private static final int REQ_PERM = 7643;

    private static final String[] perms = new String[]{
            Manifest.permission.INTERNET,
            Manifest.permission.CHANGE_WIFI_STATE,
            Manifest.permission.ACCESS_WIFI_STATE,
            Manifest.permission.ACCESS_NETWORK_STATE,
    };

    @RequiresApi(api = Build.VERSION_CODES.P)
    private static final String[] permsPi = new String[]{
            Manifest.permission.INTERNET,
            Manifest.permission.CHANGE_WIFI_STATE,
            Manifest.permission.ACCESS_WIFI_STATE,
            Manifest.permission.ACCESS_NETWORK_STATE,
            Manifest.permission.FOREGROUND_SERVICE,
    };

    private static int isGranted = 5;

    @RequiresApi(api = Build.VERSION_CODES.P)
    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View nulls = inflater.inflate(R.layout.why_perm, container, false);
        Button bin = nulls.findViewById(R.id.permdo);
        bin.setOnClickListener(v -> {
            isGranted = 0;
            for (String dks : (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) ? permsPi : perms) {
                if (getActivity() != null) {
                    if (ContextCompat.checkSelfPermission(getActivity(), dks) != PackageManager.PERMISSION_GRANTED) {
                        requestPermissions(new String[]{dks}, REQ_PERM);
                    }
                }
            }
            if (isGranted == 0) {
                Toast.makeText(getContext(), "Permissions Granted, Thanks!", Toast.LENGTH_SHORT).show();
                if (getActivity() != null)
                    getActivity().finish();
                DataMan.getInstance(getContext()).setSplashOld();
            }
        });
        return nulls;
    }

    @Override
    public int backgroundColor() {
        return R.color.BACK_INTRO;
    }

    @Override
    public int buttonsColor() {
        return R.color.colorPrimarySettings;
    }

    @Override
    public boolean canMoveFurther() {
        return isGranted == 0;
    }

    @Override
    public String cantMoveFurtherErrorMessage() {
        return "Please Grant All Permissions";
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        // If request is cancelled, the result arrays are empty.
        if (requestCode == REQ_PERM) {
            for (int grantResult : grantResults) {
                isGranted = isGranted + grantResult;
            }

            if (isGranted > 0) {
                Toast.makeText(getContext(), "Permissions not Granted", Toast.LENGTH_SHORT).show();
                if (getActivity() != null)
                    getActivity().finish();
                MainActivity.closeApp = true;
            }
        }
    }
}
