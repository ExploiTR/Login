package app.exploitr.login.platinum.ui.fragments.stat;

import android.os.Bundle;
import android.os.Handler;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import app.exploitr.fast.login.R;
import app.exploitr.fast.login.databinding.FragmentStatBinding;
import app.exploitr.login.platinum.helpers.Constants;
import app.exploitr.login.platinum.workers.PingMonLegacy;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

//todo realtime average with queue or maybe stack?


public class StatFragment extends Fragment {

	private FragmentStatBinding binding;
	private int avgPing = 0;
	private int total = 0;

	private int drops = 0;
	private int spike = 0;
	private int high = 0;

	private static final int NETWORK_HEALTH_EXCELLENT = 0; //check implementation for details
	private static final int NETWORK_HEALTH_GOOD = 1;
	private static final int NETWORK_HEALTH_FAIR = 2;
	private static final int NETWORK_HEALTH_MEDIOCRE = 3;
	private static final int NETWORK_HEALTH_AWFUL = 4;
	private static final int NETWORK_HEALTH_ABYSMAL = 5;

	public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		binding = FragmentStatBinding.inflate(inflater, container, false);

		String waiting_text_temp = String.format(getString(R.string.waiting_sec), 10);
		updateInfoInternal(waiting_text_temp);

		updateInformation();
		updateIspAndIPAddressInfo();

		PingMonLegacy.requestPing(this.getActivity(), ping -> {
			if (ping == -1) {
				drops++;
				return;
			}
			if (ping == -2) {
				spike++;
				return;
			}
			if (ping > 100)
				high++;

			if (isNullAnything())
				return;
			binding.pingGraph.addValue(ping);
			avgPing = (int) addToAverage(avgPing, total++, ping);
			binding.pingAvgGraph.addValue(avgPing);
		});

		return binding.getRoot();
	}

	private void updateIspAndIPAddressInfo() {
		new Thread(() -> {
			OkHttpClient client = new OkHttpClient();

			Request request = new Request.Builder()
					.url(Constants.IP_ADDRESS_DISPLAY_URL)
					.build();

			Request request_isp = new Request.Builder()
					.url(Constants.ISP_INFO_DISPLAY_URL)
					.build();

			try (Response response = client.newCall(request).execute()) {
				String ip;
				ResponseBody body = response.body();
				ip = body != null ? body.string() : "Unknown";
				if (!isNullAnything())
					requireActivity().runOnUiThread(() -> {
						if (!isNullAnything())
							binding.ipAddress
									.setText(String.format(getString(R.string.connected_as_s), ip));
					});
			} catch (IOException e) {
				e.printStackTrace();
			}

			try (Response response = client.newCall(request_isp).execute()) {
				String isp;
				ResponseBody body = response.body();
				isp = body != null ? body.string() : "Unknown";

				if (body != null) {
					JSONObject object = new JSONObject(isp);
					isp = String.valueOf(object.get("isp"));
				}

				if (!isNullAnything()) {
					String finalIsp = isp;
					requireActivity().runOnUiThread(() -> {
						if (!isNullAnything())
							binding.ispInfo
									.setText(String.format(getString(R.string.current_isp_s), finalIsp));
					});
				}
			} catch (IOException | JSONException e) {
				e.printStackTrace();
			}
		}).start();
	}

	//Caution : updated frequently use lazy loading.
	private void updateInformation() {
		Handler handler = new Handler();

		updateInformationStart();
		handler.postDelayed(new Runnable() {
			@Override
			public void run() {
				updateInformationInternal();
				handler.postDelayed(this, 250);
			}
		}, 10000);
	}

	private void updateInformationStart() {
		new Thread(() -> {
			long start = System.currentTimeMillis();
			long current = 0, realtime, elapsed;
			while ((realtime = System.currentTimeMillis() - start) < 10000) {
				if ((elapsed = realtime / 1000) > current) {
					current++;

					if (isNullAnything())
						return;
					final String waiting = String.format(getString(R.string.waiting_sec), 10 - elapsed);
					StatFragment.this.requireActivity().runOnUiThread(() -> {
						updateInfoInternal(waiting);
					});
				}
			}
		}).start();
	}

	private void updateInfoInternal(String limitedInfo) {
		if (isNullAnything())
			return;
		binding.networkHealth.setText(limitedInfo);
		binding.overallAvg.setText(limitedInfo);
		binding.packetLoss.setText(limitedInfo);
	}

	private void updateInformationInternal() {
		new Thread(() -> {
			if (total == 0)
				return;
			int drp = drops * 100 / total;
			int spp = spike * 100 / total;
			int hpp = high * 100 / total;
			int gpp = 100 - (drp + spp + hpp);

			int status;
			if (gpp >= 95 && drp <= 1 && spp <= 1) {
				status = NETWORK_HEALTH_EXCELLENT;
			} else if (gpp >= 90 && drp <= 1 && spp <= 1 && hpp <= 5) {
				status = NETWORK_HEALTH_GOOD;
			} else if (gpp >= 85 && drp <= 1 && spp <= 5 && hpp <= 5) {
				status = NETWORK_HEALTH_FAIR;
			} else if (gpp >= 75 && drp <= 5 && spp <= 5 && hpp <= 10) {
				status = NETWORK_HEALTH_MEDIOCRE;
			} else if (gpp >= 50 && drp <= 10 && spp <= 10 && hpp <= 20) {
				status = NETWORK_HEALTH_AWFUL;
			} else {
				status = NETWORK_HEALTH_ABYSMAL;
			}

			if (isNullAnything())
				return;
			final Status data = getStatus(status);
			StatFragment.this.requireActivity().runOnUiThread(() -> {
				binding.networkHealth.setText(
						String.format(getString(R.string.network_health_neutral), data.name)
				);
				binding.networkHealth.setTextColor(data.color);
				binding.packetLoss.setText(String.format(getString(R.string.total_packet_loss_d), drp));
				binding.overallAvg.setText(String.format(getString(R.string.ov_av_pg), avgPing));
			});
		}).start();
	}

	double addToAverage(double average, int size, double value) {
		return (size * average + value) / (size + 1);
	}

	private boolean isNullAnything() {
		return getContext() == null || getActivity() == null || binding == null;
	}

	@Override
	public void onResume() {
		PingMonLegacy.resume();
		super.onResume();
	}

	@Override
	public void onPause() {
		PingMonLegacy.cancel();
		super.onPause();
	}

	@Override
	public void onDestroyView() {
		super.onDestroyView();
		binding = null;
	}

	private Status getStatus(int statusIndicator) {
		switch (statusIndicator) {
			case NETWORK_HEALTH_EXCELLENT:
				return new Status().create(
						ContextCompat.getColor(requireContext(), R.color.COLOR_STATUS_EXCELLENT), "Excellent");
			case NETWORK_HEALTH_GOOD:
				return new Status().create(
						ContextCompat.getColor(requireContext(), R.color.COLOR_STATUS_GOOD), "Good");
			case NETWORK_HEALTH_FAIR:
				return new Status().create(
						ContextCompat.getColor(requireContext(), R.color.COLOR_STATUS_FAIR), "Fair");
			case NETWORK_HEALTH_MEDIOCRE:
				return new Status().create(
						ContextCompat.getColor(requireContext(), R.color.COLOR_STATUS_MEDIOCRE), "Mediocre");
			case NETWORK_HEALTH_AWFUL:
				return new Status().create(
						ContextCompat.getColor(requireContext(), R.color.COLOR_STATUS_AWFUL), "Awful");
			case NETWORK_HEALTH_ABYSMAL:
				return new Status().create(
						ContextCompat.getColor(requireContext(), R.color.COLOR_STATUS_ABYSMAL), "Abysmal");
			default:
				return new Status().create(
						ContextCompat.getColor(requireContext(), android.R.color.white), "Unknown");
		}
	}

	static class Status {
		int color;
		String name;

		Status create(int color, String name) {
			this.color = color;
			this.name = name;
			return this;
		}
	}
}